"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerJSXElementCollectionExtensions = void 0;
const flat_map_1 = require("./flat-map");
const jsx_attribute_utils_1 = require("./jsx-attribute-utils");
const once_1 = require("./once");
const _registerJSXElementCollectionExtensions = (jscodeshift) => {
    const j = jscodeshift;
    j.registerMethods({
        addProp: function (prop) {
            const jsxElements = this;
            jsxElements.forEach(jsxElement => {
                if ((0, jsx_attribute_utils_1.hasProp)(jsxElement, prop)) {
                    return;
                }
                const props = (0, jsx_attribute_utils_1.getJsxAttributes)(jsxElement);
                jsxElement.node.openingElement.attributes = [...props, prop];
            });
            return jsxElements;
        },
        findPropByName: function (name) {
            const jsxElements = this;
            return j((0, flat_map_1.flatMap)(jsxElements.findWithPropName(name), jsx_attribute_utils_1.getJsxAttributes));
        },
        findWithPropName: function (name) {
            const jsxElements = this;
            return jsxElements.filter(jsxElement => (0, jsx_attribute_utils_1.getNamedJsxAttributes)(jsxElement).some(jsxAttribute => (0, jsx_attribute_utils_1.getJsxAttributeName)(jsxAttribute) === name));
        },
        findWithSpreadProps: function () {
            const jsxElements = this;
            return jsxElements.filter(jsxElement => (0, jsx_attribute_utils_1.getSpreadJsxAttributes)(jsxElement).length > 0);
        },
        removeProp: function (prop) {
            const jsxElements = this;
            jsxElements.forEach(jsxElement => {
                const jsxAttributes = (0, jsx_attribute_utils_1.getJsxAttributes)(jsxElement);
                const isStringProp = typeof prop === 'string';
                jsxElement.node.openingElement.attributes = jsxAttributes.filter(jsxAttribute => isStringProp ? (0, jsx_attribute_utils_1.getJsxAttributeName)(jsxAttribute) !== prop : !(0, jsx_attribute_utils_1.isEqual)(jsxAttribute, prop));
            });
            return jsxElements;
        },
        renameTo: function (name) {
            const jsxElements = this;
            jsxElements.forEach(jsxElement => {
                jsxElement.node.openingElement.name = j.jsxIdentifier(name);
                if (jsxElement.node.closingElement != null) {
                    jsxElement.node.closingElement = j.jsxClosingElement(j.jsxIdentifier(name));
                }
            });
            return jsxElements;
        },
        wrap: function (name, props) {
            const jsxElements = this;
            const elementName = j.jsxIdentifier(name);
            jsxElements.forEach(jsxElement => {
                const attributes = (props !== null && props !== void 0 ? props : []).map(prop => {
                    const { name: propName, value } = prop;
                    const isStringValue = typeof value === 'string';
                    return j.jsxAttribute(j.jsxIdentifier(propName), isStringValue ? j.literal(value) : value);
                });
                jsxElement.insertBefore(j.jsxOpeningElement(elementName, attributes));
                jsxElement.insertAfter(j.jsxClosingElement(elementName));
            });
            return jsxElements;
        }
    }, j.JSXElement);
    return j;
};
const registerJSXElementCollectionExtensions = (0, once_1.once)(_registerJSXElementCollectionExtensions);
exports.registerJSXElementCollectionExtensions = registerJSXElementCollectionExtensions;
