"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_logger_1 = require("../utils/get-logger");
const register_extensions_1 = require("../utils/register-extensions");
/**
 * Codemod to replace references to the <SidebarTab /> component removed in v7
 * ```
 * npx jscodeshift -t node_modules/evergreen-ui/codemods/dist/6.0.0-7.0.0/replace-sidebar-tabs.js --parser=tsx --extensions=js,jsx,ts,tsx fileOrDirectory --dry --print
 * ```
 *
 * Converts:
 * <SidebarTab /> to <Tab direction="vertical" />
 */
const DIRECTION = 'direction';
const SIDEBAR_TAB = 'SidebarTab';
const TAB = 'Tab';
const VERTICAL = 'vertical';
const transformer = (file, api) => {
    const log = (0, get_logger_1.getLogger)(file);
    const j = (0, register_extensions_1.registerExtensions)(api.jscodeshift);
    const root = j(file.source);
    const importDeclarations = root.findEvergreenImportDeclaration();
    if (importDeclarations.isEmpty()) {
        return file.source;
    }
    const specifiers = importDeclarations.findImportSpecifiersByName(SIDEBAR_TAB);
    // If the file doesn't import `SidebarTab` from evergreen-ui, don't try to replace the JSX
    if (specifiers.isEmpty()) {
        return file.source;
    }
    specifiers.renameTo(TAB);
    const sidebarTabs = root.findJSXElements(SIDEBAR_TAB);
    sidebarTabs.renameTo(TAB).forEach(sidebarTab => {
        var _a;
        const jsxElement = j(sidebarTab);
        const existingDirectionProp = jsxElement.findPropByName(DIRECTION).firstNode();
        // If an existing `direction` prop exists, don't bother adding a duplicate one.
        const directionProp = existingDirectionProp !== null && existingDirectionProp !== void 0 ? existingDirectionProp : j.jsxAttribute(j.jsxIdentifier(DIRECTION), j.stringLiteral(VERTICAL));
        if (((_a = directionProp.value) === null || _a === void 0 ? void 0 : _a.type) === 'Literal' && directionProp.value.value !== VERTICAL) {
            const { value } = directionProp.value;
            log(`Found <${SIDEBAR_TAB} /> with ${DIRECTION}='${value}'. This is likely a mistake, but will not be modified.`, directionProp);
            return;
        }
        jsxElement.removeProp(directionProp).addProp(directionProp);
    });
    return root.toSource();
};
exports.default = transformer;
